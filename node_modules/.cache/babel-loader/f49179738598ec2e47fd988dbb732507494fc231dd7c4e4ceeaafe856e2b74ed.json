{"ast":null,"code":"var _jsxFileName = \"/Users/yuxuan/Desktop/projects/scala-sentiment-web/src/components/Airline.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport axios from 'axios';\nimport Papa from 'papaparse';\nimport { BASE_URL } from '../constants'; // 确保这里的路径正确指向你的常量定义\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Airline = () => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  useEffect(() => {\n    // 构造请求的URL，这里假设BASE_URL是你的API基础路径，`/airline`是获取CSV数据的具体路径\n    const url = `${BASE_URL}/airline`;\n\n    // 使用axios发起GET请求获取CSV文件，设置响应类型为'blob'以正确处理二进制文件\n    axios.get(url, {\n      responseType: 'blob'\n    }).then(response => {\n      // 创建一个FileReader对象来读取响应的blob数据\n      const reader = new FileReader();\n\n      // 当FileReader完成读取操作时，这个函数会被调用\n      reader.onload = () => {\n        // 使用Papa.parse解析FileReader读取的结果（即CSV文件的内容）\n        Papa.parse(reader.result, {\n          complete: result => {\n            // 解析完成后，result.data包含了CSV文件中的数据，这是一个数组的数组\n            const csvData = result.data;\n\n            // 获取标签（即第一行除了第一列之外的所有单元格），通常这些标签用于图表的x轴\n            const labels = csvData[0].slice(1);\n\n            // 获取数据（假设每行的第二列包含需要的数据），并将其转换为浮点数\n            // 这里的数据用于图表的y轴\n            const data = csvData.slice(1).map(row => parseFloat(row[1]));\n\n            // 设置图表的数据，这会触发图表组件的重新渲染\n            setChartData({\n              labels,\n              datasets: [{\n                label: 'Airline Data',\n                // 图表的标题\n                data,\n                // 图表的数据\n                backgroundColor: 'rgba(54, 162, 235, 0.6)' // 图表数据的背景颜色\n              }]\n            });\n          }\n        });\n      };\n\n      // 读取响应的blob数据作为文本，这将触发上面定义的onload函数\n      reader.readAsText(response.data);\n    }).catch(error => {\n      // 如果请求或读取过程中发生错误，这里会捕获到，并打印错误信息\n      console.error('Error fetching CSV:', error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"airline-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Airline Performance Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monthly Data Overview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), chartData && /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(Airline, \"9euvDhZ+n6eLTlbzwvHmNPhoqAw=\");\n_c = Airline;\nexport default Airline;\nvar _c;\n$RefreshReg$(_c, \"Airline\");","map":{"version":3,"names":["React","useState","useEffect","Bar","axios","Papa","BASE_URL","jsxDEV","_jsxDEV","Airline","_s","chartData","setChartData","url","get","responseType","then","response","reader","FileReader","onload","parse","result","complete","csvData","data","labels","slice","map","row","parseFloat","datasets","label","backgroundColor","readAsText","catch","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yuxuan/Desktop/projects/scala-sentiment-web/src/components/Airline.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport axios from 'axios';\nimport Papa from 'papaparse';\nimport { BASE_URL } from '../constants';  // 确保这里的路径正确指向你的常量定义\n\nconst Airline = () => {\n  const [chartData, setChartData] = useState(null);\n\n  useEffect(() => {\n    // 构造请求的URL，这里假设BASE_URL是你的API基础路径，`/airline`是获取CSV数据的具体路径\n    const url = `${BASE_URL}/airline`;\n  \n    // 使用axios发起GET请求获取CSV文件，设置响应类型为'blob'以正确处理二进制文件\n    axios.get(url, { responseType: 'blob' })\n      .then(response => {\n        // 创建一个FileReader对象来读取响应的blob数据\n        const reader = new FileReader();\n  \n        // 当FileReader完成读取操作时，这个函数会被调用\n        reader.onload = () => {\n          // 使用Papa.parse解析FileReader读取的结果（即CSV文件的内容）\n          Papa.parse(reader.result, {\n            complete: (result) => {\n              // 解析完成后，result.data包含了CSV文件中的数据，这是一个数组的数组\n              const csvData = result.data;\n  \n              // 获取标签（即第一行除了第一列之外的所有单元格），通常这些标签用于图表的x轴\n              const labels = csvData[0].slice(1);\n  \n              // 获取数据（假设每行的第二列包含需要的数据），并将其转换为浮点数\n              // 这里的数据用于图表的y轴\n              const data = csvData.slice(1).map(row => parseFloat(row[1]));\n  \n              // 设置图表的数据，这会触发图表组件的重新渲染\n              setChartData({\n                labels,\n                datasets: [{\n                  label: 'Airline Data',  // 图表的标题\n                  data,                   // 图表的数据\n                  backgroundColor: 'rgba(54, 162, 235, 0.6)',  // 图表数据的背景颜色\n                }]\n              });\n            }\n          });\n        };\n  \n        // 读取响应的blob数据作为文本，这将触发上面定义的onload函数\n        reader.readAsText(response.data);\n      })\n      .catch(error => {\n        // 如果请求或读取过程中发生错误，这里会捕获到，并打印错误信息\n        console.error('Error fetching CSV:', error);\n      });\n  }, []);\n  \n\n  return (\n    <div className=\"airline-container\">\n      <h1>Airline Performance Analysis</h1>\n      <h2>Monthly Data Overview</h2>\n      {chartData && <Bar data={chartData} />}\n    </div>\n  );\n};\n\nexport default Airline;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,GAAG,QAAQ,iBAAiB;AACrC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,WAAW;AAC5B,SAASC,QAAQ,QAAQ,cAAc,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,GAAG,GAAI,GAAEP,QAAS,UAAS;;IAEjC;IACAF,KAAK,CAACU,GAAG,CAACD,GAAG,EAAE;MAAEE,YAAY,EAAE;IAAO,CAAC,CAAC,CACrCC,IAAI,CAACC,QAAQ,IAAI;MAChB;MACA,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;;MAE/B;MACAD,MAAM,CAACE,MAAM,GAAG,MAAM;QACpB;QACAf,IAAI,CAACgB,KAAK,CAACH,MAAM,CAACI,MAAM,EAAE;UACxBC,QAAQ,EAAGD,MAAM,IAAK;YACpB;YACA,MAAME,OAAO,GAAGF,MAAM,CAACG,IAAI;;YAE3B;YACA,MAAMC,MAAM,GAAGF,OAAO,CAAC,CAAC,CAAC,CAACG,KAAK,CAAC,CAAC,CAAC;;YAElC;YACA;YACA,MAAMF,IAAI,GAAGD,OAAO,CAACG,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAACC,GAAG,IAAIC,UAAU,CAACD,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;YAE5D;YACAjB,YAAY,CAAC;cACXc,MAAM;cACNK,QAAQ,EAAE,CAAC;gBACTC,KAAK,EAAE,cAAc;gBAAG;gBACxBP,IAAI;gBAAoB;gBACxBQ,eAAe,EAAE,yBAAyB,CAAG;cAC/C,CAAC;YACH,CAAC,CAAC;UACJ;QACF,CAAC,CAAC;MACJ,CAAC;;MAED;MACAf,MAAM,CAACgB,UAAU,CAACjB,QAAQ,CAACQ,IAAI,CAAC;IAClC,CAAC,CAAC,CACDU,KAAK,CAACC,KAAK,IAAI;MACd;MACAC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAGN,oBACE5B,OAAA;IAAK8B,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChC/B,OAAA;MAAA+B,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrCnC,OAAA;MAAA+B,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC7BhC,SAAS,iBAAIH,OAAA,CAACL,GAAG;MAACsB,IAAI,EAAEd;IAAU;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEV,CAAC;AAACjC,EAAA,CA1DID,OAAO;AAAAmC,EAAA,GAAPnC,OAAO;AA4Db,eAAeA,OAAO;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}