{"ast":null,"code":"var _jsxFileName = \"/Users/yuxuan/Desktop/projects/scala-sentiment-web/src/components/Airline.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport axios from 'axios';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { BASE_URL } from '../constants';\n\n// Register the chart components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nconst Airline = () => {\n  _s();\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    const url = `${BASE_URL}/airline`;\n    axios.get(url).then(response => {\n      const data = response.data;\n\n      // Check if the data is in the expected format (array of objects)\n      if (Array.isArray(data) && data.length > 0) {\n        const hours = data.map((item, index) => {\n          var _item$hour;\n          return (_item$hour = item.hour) !== null && _item$hour !== void 0 ? _item$hour : `Unknown ${index}`;\n        });\n        const averageSentiment = data.map(item => item.average_sentiment);\n        const averageSentimentComputed = data.map(item => item.average_sentiment_computed);\n        setChartData({\n          labels: hours,\n          datasets: [{\n            label: 'Average Sentiment',\n            data: averageSentiment,\n            backgroundColor: 'rgba(255, 99, 132, 0.6)'\n          }, {\n            label: 'Average Sentiment Computed',\n            data: averageSentimentComputed,\n            backgroundColor: 'rgba(54, 162, 235, 0.6)'\n          }]\n        });\n      } else {\n        console.error('Data is not an array or is empty');\n      }\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  }, []);\n  const options = {\n    scales: {\n      x: {\n        type: 'category',\n        title: {\n          display: true,\n          text: 'Hour of the Day'\n        }\n      },\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Sentiment Value'\n        }\n      }\n    },\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Airline Sentiment Analysis'\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"airline-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Airline Performance Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monthly Data Overview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), chartData && /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(Airline, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n_c = Airline;\nexport default Airline;\nvar _c;\n$RefreshReg$(_c, \"Airline\");","map":{"version":3,"names":["React","useState","useEffect","Bar","axios","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","BASE_URL","jsxDEV","_jsxDEV","register","Airline","_s","chartData","setChartData","url","get","then","response","data","Array","isArray","length","hours","map","item","index","_item$hour","hour","averageSentiment","average_sentiment","averageSentimentComputed","average_sentiment_computed","labels","datasets","label","backgroundColor","console","error","catch","options","scales","x","type","title","display","text","y","beginAtZero","responsive","plugins","legend","position","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yuxuan/Desktop/projects/scala-sentiment-web/src/components/Airline.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport axios from 'axios';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { BASE_URL } from '../constants';\n\n// Register the chart components\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nconst Airline = () => {\n  const [chartData, setChartData] = useState({});\n\n  useEffect(() => {\n    const url = `${BASE_URL}/airline`;\n\n    axios.get(url)\n      .then(response => {\n        const data = response.data;\n\n        // Check if the data is in the expected format (array of objects)\n        if (Array.isArray(data) && data.length > 0) {\n          const hours = data.map((item, index) => item.hour ?? `Unknown ${index}`);\n          const averageSentiment = data.map(item => item.average_sentiment);\n          const averageSentimentComputed = data.map(item => item.average_sentiment_computed);\n\n          setChartData({\n            labels: hours,\n            datasets: [\n              {\n                label: 'Average Sentiment',\n                data: averageSentiment,\n                backgroundColor: 'rgba(255, 99, 132, 0.6)',\n              },\n              {\n                label: 'Average Sentiment Computed',\n                data: averageSentimentComputed,\n                backgroundColor: 'rgba(54, 162, 235, 0.6)',\n              }\n            ]\n          });\n        } else {\n          console.error('Data is not an array or is empty');\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching data:', error);\n      });\n  }, []);\n\n  const options = {\n    scales: {\n      x: {\n        type: 'category',\n        title: {\n          display: true,\n          text: 'Hour of the Day'\n        }\n      },\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Sentiment Value'\n        }\n      }\n    },\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Airline Sentiment Analysis'\n      }\n    }\n  };\n\n  return (\n    <div className=\"airline-container\">\n      <h1>Airline Performance Analysis</h1>\n      <h2>Monthly Data Overview</h2>\n      {chartData && <Bar data={chartData} options={options} />}\n    </div>\n  );\n};\n\nexport default Airline;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,GAAG,QAAQ,iBAAiB;AACrC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,IAAIC,OAAO,EAAEC,aAAa,EAAEC,WAAW,EAAEC,UAAU,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,QAAQ,UAAU;AAC3G,SAASC,QAAQ,QAAQ,cAAc;;AAEvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAT,OAAO,CAACU,QAAQ,CAACT,aAAa,EAAEC,WAAW,EAAEC,UAAU,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,CAAC;AAEhF,MAAMK,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd,MAAMmB,GAAG,GAAI,GAAER,QAAS,UAAS;IAEjCT,KAAK,CAACkB,GAAG,CAACD,GAAG,CAAC,CACXE,IAAI,CAACC,QAAQ,IAAI;MAChB,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAI;;MAE1B;MACA,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,IAAIA,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE;QAC1C,MAAMC,KAAK,GAAGJ,IAAI,CAACK,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK;UAAA,IAAAC,UAAA;UAAA,QAAAA,UAAA,GAAKF,IAAI,CAACG,IAAI,cAAAD,UAAA,cAAAA,UAAA,GAAK,WAAUD,KAAM,EAAC;QAAA,EAAC;QACxE,MAAMG,gBAAgB,GAAGV,IAAI,CAACK,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACK,iBAAiB,CAAC;QACjE,MAAMC,wBAAwB,GAAGZ,IAAI,CAACK,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACO,0BAA0B,CAAC;QAElFlB,YAAY,CAAC;UACXmB,MAAM,EAAEV,KAAK;UACbW,QAAQ,EAAE,CACR;YACEC,KAAK,EAAE,mBAAmB;YAC1BhB,IAAI,EAAEU,gBAAgB;YACtBO,eAAe,EAAE;UACnB,CAAC,EACD;YACED,KAAK,EAAE,4BAA4B;YACnChB,IAAI,EAAEY,wBAAwB;YAC9BK,eAAe,EAAE;UACnB,CAAC;QAEL,CAAC,CAAC;MACJ,CAAC,MAAM;QACLC,OAAO,CAACC,KAAK,CAAC,kCAAkC,CAAC;MACnD;IACF,CAAC,CAAC,CACDC,KAAK,CAACD,KAAK,IAAI;MACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,OAAO,GAAG;IACdC,MAAM,EAAE;MACNC,CAAC,EAAE;QACDC,IAAI,EAAE,UAAU;QAChBC,KAAK,EAAE;UACLC,OAAO,EAAE,IAAI;UACbC,IAAI,EAAE;QACR;MACF,CAAC;MACDC,CAAC,EAAE;QACDC,WAAW,EAAE,IAAI;QACjBJ,KAAK,EAAE;UACLC,OAAO,EAAE,IAAI;UACbC,IAAI,EAAE;QACR;MACF;IACF,CAAC;IACDG,UAAU,EAAE,IAAI;IAChBC,OAAO,EAAE;MACPC,MAAM,EAAE;QACNC,QAAQ,EAAE;MACZ,CAAC;MACDR,KAAK,EAAE;QACLC,OAAO,EAAE,IAAI;QACbC,IAAI,EAAE;MACR;IACF;EACF,CAAC;EAED,oBACErC,OAAA;IAAK4C,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChC7C,OAAA;MAAA6C,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrCjD,OAAA;MAAA6C,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC7B7C,SAAS,iBAAIJ,OAAA,CAACZ,GAAG;MAACsB,IAAI,EAAEN,SAAU;MAAC2B,OAAO,EAAEA;IAAQ;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrD,CAAC;AAEV,CAAC;AAAC9C,EAAA,CA5EID,OAAO;AAAAgD,EAAA,GAAPhD,OAAO;AA8Eb,eAAeA,OAAO;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}