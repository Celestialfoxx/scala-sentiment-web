{"ast":null,"code":"var _jsxFileName = \"/Users/yuxuan/Desktop/projects/scala-sentiment-web/src/components/Chart.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport CSVReader from 'react-csv-reader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chart = props => {\n  _s();\n  const [data, setData] = useState(null);\n  const handleData = csvData => {\n    // Assuming your CSV has headers and the first column represents labels\n    const labels = csvData[0].slice(1); // Exclude the first column as labels\n    const datasets = [];\n\n    // Iterate through CSV rows starting from the second row\n    for (let i = 1; i < csvData.length; i++) {\n      const row = csvData[i];\n      const dataset = {\n        label: row[0],\n        // First column as dataset label\n        data: row.slice(1).map(value => parseFloat(value)),\n        // Exclude the first column as data points\n        backgroundColor: `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.6)` // Random color for each dataset\n      };\n      datasets.push(dataset);\n    }\n\n    // Construct chart data\n    const chartData = {\n      labels,\n      datasets\n    };\n    setData(chartData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data && /*#__PURE__*/_jsxDEV(Bar, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(Chart, \"r4Mei8r/vISzc+89378cYwOGDkw=\");\n_c = Chart;\nexport default Chart;\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["React","useState","Bar","CSVReader","jsxDEV","_jsxDEV","Chart","props","_s","data","setData","handleData","csvData","labels","slice","datasets","i","length","row","dataset","label","map","value","parseFloat","backgroundColor","Math","random","push","chartData","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yuxuan/Desktop/projects/scala-sentiment-web/src/components/Chart.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport CSVReader from 'react-csv-reader';\n\nconst Chart = (props) => {\n  const [data, setData] = useState(null);\n\n  const handleData = (csvData) => {\n    // Assuming your CSV has headers and the first column represents labels\n    const labels = csvData[0].slice(1); // Exclude the first column as labels\n    const datasets = [];\n\n    // Iterate through CSV rows starting from the second row\n    for (let i = 1; i < csvData.length; i++) {\n      const row = csvData[i];\n      const dataset = {\n        label: row[0], // First column as dataset label\n        data: row.slice(1).map((value) => parseFloat(value)), // Exclude the first column as data points\n        backgroundColor: `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.6)`, // Random color for each dataset\n      };\n      datasets.push(dataset);\n    }\n\n    // Construct chart data\n    const chartData = {\n      labels,\n      datasets,\n    };\n\n    setData(chartData);\n  };\n\n  return (\n    <div>\n      {/* <CSVReader onFileLoaded={handleData} /> */}\n      {data && <Bar data={data} />}\n    </div>\n  );\n};\n\nexport default Chart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,GAAG,QAAQ,iBAAiB;AACrC,OAAOC,SAAS,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,KAAK,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMU,UAAU,GAAIC,OAAO,IAAK;IAC9B;IACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,CAAC,CAAC,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,MAAMC,QAAQ,GAAG,EAAE;;IAEnB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;MACvC,MAAME,GAAG,GAAGN,OAAO,CAACI,CAAC,CAAC;MACtB,MAAMG,OAAO,GAAG;QACdC,KAAK,EAAEF,GAAG,CAAC,CAAC,CAAC;QAAE;QACfT,IAAI,EAAES,GAAG,CAACJ,KAAK,CAAC,CAAC,CAAC,CAACO,GAAG,CAAEC,KAAK,IAAKC,UAAU,CAACD,KAAK,CAAC,CAAC;QAAE;QACtDE,eAAe,EAAG,QAAOC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAI,KAAID,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAI,KAAID,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAI,QAAO,CAAE;MACxG,CAAC;MACDX,QAAQ,CAACY,IAAI,CAACR,OAAO,CAAC;IACxB;;IAEA;IACA,MAAMS,SAAS,GAAG;MAChBf,MAAM;MACNE;IACF,CAAC;IAEDL,OAAO,CAACkB,SAAS,CAAC;EACpB,CAAC;EAED,oBACEvB,OAAA;IAAAwB,QAAA,EAEGpB,IAAI,iBAAIJ,OAAA,CAACH,GAAG;MAACO,IAAI,EAAEA;IAAK;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzB,CAAC;AAEV,CAAC;AAACzB,EAAA,CAlCIF,KAAK;AAAA4B,EAAA,GAAL5B,KAAK;AAoCX,eAAeA,KAAK;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}